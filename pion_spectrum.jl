using LatticeQCD

# - - parameters - - - - - - - - - - -
mass = 0.05 # quark mass

# Physical setting
system = Dict()
system["L"] = (16, 16, 16, 32) # x, y, z, t
system["NC"] = 3 # The number of colors. "Nc" should be larger than 1.
system["β"] = 5.7 # coupling constant: 2Nc/g^2
system["Nthermalization"] = 0 # burn-in time
system["Nsteps"] = 10 # the number of trajectory (# of samples)
system["initial"] = "cold" # initial condition for HMC
system["initialtrj"] = 1 # initial number of HMC.
system["update_method"] = "HMC" # You can use Heatbath for quenched case.
system["Nwing"] = 1

# Physical setting(fermions)
staggered = Dict()
system["quench"] = true # if you put true, quenched approximation is used
system["Dirac_operator"] = "Wilson" # You can use Wilson fermions.
Wilson = Dict()
Wilson["hop"] = 1 / (2 * (mass + 4))
Wilson["r"] = 1
system["BoundaryCondition"] = [1, 1, 1, -1] # the boundary condition for quark: x,y,z,t.

# System Control # direcotry for measurements.
measurement = Dict()
system["log_dir"] = "./logs"
system["logfile"] = "wilson_m_" * string(mass) * ".txt"
system["saveU_dir"] = ""
system["saveU_format"] = nothing
system["saveU_every"] = 10000
system["verboselevel"] = 2
system["randomseed"] = 111
measurement["measurement_basedir"] = "./measurements"
measurement["measurement_dir"] = "wilson/m_" * string(mass)

# parameter for HMC
md = Dict()
cg = Dict()
md["SextonWeingargten"] = false
md["N_SextonWeingargten"] = 2
md["MDsteps"] = 7
md["Δτ"] = 1 / md["MDsteps"]
cg["eps"] = 1.0e-19
cg["MaxCGstep"] = 3000

# Action parameter for SLMC (this is not used)
actions = Dict()
actions["use_autogeneratedstaples"] = false
actions["couplingcoeff"] = Any[]
actions["couplinglist"] = Any[]

# Setting for the measurements.
measurement["measurement_methods"] = Dict[
  Dict{Any,Any}("methodname" => "Pion_correlator",
  "measure_every" => 1,
  "fermiontype" => "Wilson",
  "hop" => 1 / (2 * (mass + 4))
)
]
# - - - - - - - - - - - - - - - - - - -
my_QCD_parameter = make_parameters(system, actions, md, cg, measurement, wilson=Wilson, # staggered=staggered
);

@time x = run_LQCD(my_QCD_parameter);

print(x)
